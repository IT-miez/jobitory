// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Schemas for the application
// Commented out parts that are yet to be converted
// to work with PSQL

model Education {
  id                     Int      @id @default(autoincrement())
  school_name            String
  city                   String
  degree                 String
  subject                String
  from                   DateTime
  to                     DateTime
  additional_information String
  userdata_id            Int
  user                   UserData @relation(fields: [userdata_id], references: [id])
}

model Experience {
  id                     Int       @id @default(autoincrement())
  company_name           String
  position               String
  city                   String
  from                   DateTime
  to                     DateTime?
  additional_information String
  userdata_id            Int
  user                   UserData  @relation(fields: [userdata_id], references: [id])
}

// Note!
// Add models for CV here

model Certificate {
  id                     Int       @id @default(autoincrement())
  title                  String
  issuing_organization   String
  issue_date             DateTime
  expiration_date        DateTime?
  certificate_url        String?
  additional_information String?
  //userId            Int      
  // relation to what field?
}

model Custom_Box {
  id            Int      @id @default(autoincrement())
  title         String
  string_titles String[]
  text_content  String[]
  //userId            Int
  // relation to what field?    
}

model Job {
  id                     Int    @id @default(autoincrement())
  position               String
  status                 String
  additional_information String
  url                    String
}

model Image {
  id                   Int     @id @default(autoincrement())
  cloudinary_url       String?
  cloudinary_public_id String?
  user_id              Int     @unique
  user                 User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model User {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  first_name   String
  last_name    String
  phone_number String?
  address      String?
  post_code    String?
  municipality String?
  image        Image?
  password     String
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  userdata     UserData?
}

model UserData {
  id          Int          @id @default(autoincrement())
  educations  Education[]
  experiences Experience[]
  user_id     Int          @unique
  user        User         @relation(fields: [user_id], references: [id])
}
